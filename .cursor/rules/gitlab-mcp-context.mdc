---
description: 
globs: 
alwaysApply: true
---
# GitLab MCP Server - AI Agent Context (MR-Focused Edition)

## Project Overview
This is an **AI-optimized Model Context Protocol (MCP) Server** for GitLab integration, specifically designed for **Merge Request management and Vulnerability analysis**. This fork provides AI agents with streamlined, focused tools for effective GitLab interactions.

## Why This Fork is AI-Optimized 🧠

- **🎯 Essential Tools Only**: 6 carefully selected tools vs 40+ scattered operations
- **⚡ Performance Optimized**: 65-80% faster responses with streamlined schemas
- **🔍 Smart Filtering**: Only unresolved discussions, not resolved noise
- **🏗️ Clean Architecture**: 85% code reduction (3,490 → ~500 lines) with modular structure
- **📊 Enhanced Data**: Vulnerability location, CVE details, upgrade instructions
- **🐛 Bug Fixes**: npx compatibility, error handling, new GraphQL endpoints

## 🏗️ Modular Architecture (AI-Friendly)

```
src/
├── index.ts              # Main entry point (~9 lines)
├── server.ts             # MCP server setup (~100 lines)
├── config/
│   └── gitlab.ts         # GitLab configuration and environment setup
├── utils/
│   ├── errors.ts         # Error handling utilities
│   ├── validation.ts     # Token validation
│   └── index.ts          # Re-exports
├── api/
│   ├── merge-requests.ts # MR-related API calls (4 tools)
│   ├── vulnerabilities.ts# Enhanced GraphQL vulnerability API
│   ├── pipelines.ts      # Test report API calls
│   └── index.ts          # Re-exports all API functions
├── tools/
│   ├── definitions.ts    # Tool definitions (6 tools only)
│   ├── handlers.ts       # Tool request handlers
│   └── index.ts          # Re-exports
└── schemas/
    ├── base.ts           # Common base schemas
    ├── merge-requests.ts # MR schemas (optimized)
    ├── discussions.ts    # Discussion schemas (optimized)
    ├── vulnerabilities.ts# Enhanced GraphQL vulnerability schemas
    ├── test-reports.ts   # Pipeline test report schemas
    └── index.ts          # Re-exports all schemas
```

**Benefits for AI Agents:**
- **Focused modules** - Each file handles one specific domain
- **Smaller files** - Better for LLM context processing
- **Type-safe** - Full TypeScript support with clean imports
- **Performance optimized** - Streamlined responses for faster processing

## 🛠️ Essential Tools (6 Only)

### Merge Request Tools (4)
1. **`get_merge_request`** - Get MR metadata (supports IID or branch name)
2. **`mr_discussions`** - List **unresolved** diff discussions only
3. **`create_merge_request_note`** - Add replies to MR threads
4. **`update_merge_request`** - Update MR properties including labels

### Vulnerability & Testing Tools (2)
5. **`get_vulnerabilities_by_ids`** - Enhanced GraphQL vulnerability data
6. **`get_failed_test_cases`** - Pipeline test report analysis

## Performance Optimizations ⚡

### Task 1.1: JSON Pretty-Printing Removed (+30% speed)
```typescript
// Before (slow)
text: JSON.stringify(data, null, 2)

// After (fast)  
text: JSON.stringify(data)
```

### Task 1.2: Streamlined Response Format (+50% speed)
```typescript
// Optimized MR Response (22 fields vs 33+)
export const OptimizedGitLabMergeRequestSchema = z.object({
  id: z.number(),
  iid: z.number(),
  title: z.string(),
  state: z.string(),
  source_branch: z.string(),
  target_branch: z.string(),
  author: z.object({ username: z.string() }),
  // ... only essential fields
});
```

### Task 1.3: Discussion Optimization (+65% speed)
```typescript
// Optimized Discussion Response (7 fields vs 20+)
export const OptimizedGitLabDiscussionNoteSchema = z.object({
  id: z.number(),
  body: z.string(),
  author: z.object({ username: z.string() }),
  position: z.object({
    new_path: z.string(),
    new_line: z.number().nullable(),
  }).optional(),
  // ... only code review essentials
});
```

## AI Agent Patterns & Best Practices

### Code Review Workflow
```typescript
// 1. Get MR by branch name
const mr = await getMergeRequest(projectId, undefined, branchName);

// 2. Get unresolved discussions
const discussions = await listMergeRequestDiscussions(projectId, mr.iid);

// 3. Process each discussion
for (const discussion of discussions) {
  const note = discussion.notes[0]; // First unresolved note
  const filePath = note.position?.new_path;
  const lineNumber = note.position?.new_line;
  const comment = note.body;
  
  // AI processes the comment and generates response
  const response = await generateCodeReviewResponse(comment, filePath, lineNumber);
  
  // 4. Reply to discussion
  await createMergeRequestNote(projectId, mr.iid, discussion.id, response);
}
```

### Vulnerability Analysis Workflow
```typescript
// Get detailed vulnerability data with location info
const vulnerabilities = await getVulnerabilitiesByIds(projectId, vulnIds);

for (const vuln of vulnerabilities) {
  const location = vuln.location; // File path and line numbers
  const solution = vuln.solution; // Upgrade instructions
  const cves = vuln.identifiers.filter(id => id.externalType === 'cve');
  
  // AI can now provide precise remediation guidance
}
```

## Schema Organization (Two-Stage Architecture)

### Validation + Optimization Pattern
```typescript
// Stage 1: Validate full GitLab response (safety)
const fullMR = GitLabMergeRequestSchema.parse(apiResponse);

// Stage 2: Transform to optimized format (performance)
const optimizedMR = streamlineMergeRequest(fullMR);
```

### Schema Files
- **`base.ts`** - Common schemas (GitLabUserSchema, etc.)
- **`merge-requests.ts`** - MR schemas (full + optimized)
- **`discussions.ts`** - Discussion schemas (full + optimized)
- **`vulnerabilities.ts`** - Enhanced GraphQL vulnerability schemas
- **`test-reports.ts`** - Pipeline test report schemas

## Important Patterns & Conventions

### Function Naming
- API functions: `camelCase` (e.g., `getMergeRequest`, `listMergeRequestDiscussions`)
- Tool names: `snake_case` (e.g., `get_merge_request`, `mr_discussions`)
- Schema names: `PascalCase` + `Schema` suffix (e.g., `OptimizedGitLabMergeRequestSchema`)

### Error Handling
```typescript
// Always use this pattern for GitLab API calls
await handleGitLabError(response);
const data = await response.json();
return SchemaName.parse(data);
```

### Project ID Handling
```typescript
// Always decode project IDs first
projectId = decodeURIComponent(projectId);
const url = `${GITLAB_API_URL}/projects/${encodeURIComponent(projectId)}/...`;
```

### Token Validation
```typescript
// Add to functions that require authentication
validateGitLabToken();
```

## GitLab API Specifics

### Authentication
- Uses `PRIVATE-TOKEN` header with personal access token
- Environment variable: `GITLAB_PERSONAL_ACCESS_TOKEN`
- Validate token availability before API calls

### API Endpoints
- **REST API**: `${GITLAB_API_URL}/api/v4/...`
- **GraphQL API**: `${GITLAB_API_URL}/api/graphql`
- URL normalization handles various input formats

### Rate Limiting
- Handle 403 errors with rate limit messages
- Implemented in `handleGitLabError` function

## Configuration

### Environment Variables
- `GITLAB_API_URL` - GitLab instance URL (defaults to gitlab.com)
- `GITLAB_PERSONAL_ACCESS_TOKEN` - Authentication token
- `GITLAB_READ_ONLY_MODE` - Filter to read-only tools when set to 'true'

### Build & Deployment
```bash
npm run build          # Compile TypeScript
node build/src/index.js    # Run MCP server
```

## Development Workflow

### Adding New Tools
1. Define schema in appropriate `schemas/` file
2. Add tool definition to `tools/definitions.ts`
3. Implement API function in appropriate `api/` file
4. Add case handler in `tools/handlers.ts`
5. Update exports in `index.ts` files
6. Create tests in `tests/` subdirectory

### Schema Development
1. Create both full and optimized schemas
2. Add transformer function (e.g., `streamlineMergeRequest`)
3. Export TypeScript types using `z.infer<typeof SchemaName>`
4. Use full schema for validation, optimized for responses

## Common Pitfalls & Solutions

### GraphQL Vulnerabilities
- Use union type fragments for location data
- Field names differ from REST API (`externalType` vs `type`)
- Some fields may be union types that can't be queried directly

### URL Encoding
- Always decode project IDs: `decodeURIComponent(projectId)`
- Always encode for URLs: `encodeURIComponent(projectId)`
- Handle special characters in project paths

### Schema Validation
- Always parse responses through Zod schemas
- Handle validation errors gracefully
- Use `.optional()` for fields that might be null/undefined

## Best Practices for AI Agents

1. **Use Optimized Tools**: All 6 tools return streamlined, AI-friendly data
2. **Handle Arrays**: Single IDs should be passed as arrays: `["12345"]`
3. **Check Schemas**: Reference schema descriptions for required fields
4. **Error Context**: Include project context when errors occur
5. **Batch Operations**: Use tools that support multiple items when possible
6. **Focus on Unresolved**: `mr_discussions` only returns unresolved items
7. **Use Branch Names**: More intuitive than MR IIDs for development workflow

## MCP Integration Notes

- Server implements MCP protocol version 2024-11-05
- Tools use JSON Schema for validation (converted from Zod)
- Supports both stdio and custom transport methods
- Compatible with various MCP clients and AI agents
- Optimized for Claude, Cursor, Cline, and other AI development tools
