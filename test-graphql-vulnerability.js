#!/usr/bin/env node

// Test the get_vulnerability_by_id tool with GraphQL
import { spawn } from 'child_process';

const child = spawn('node', ['build/index.js'], {
  stdio: ['pipe', 'pipe', 'pipe'],
  env: {
    ...process.env,
    GITLAB_PERSONAL_ACCESS_TOKEN: 'BXz2RUsdvggHkypZsfsW',
    GITLAB_API_URL: 'https://gitlab.agodadev.io'
  }
});

const TARGET_VULNERABILITY_ID = '12094621';

// Test the get_vulnerability_by_id tool
const testRequest = {
  jsonrpc: "2.0",
  id: 7,
  method: "tools/call",
  params: {
    name: "get_vulnerability_by_id",
    arguments: {
      project_id: "connectivity/jtb-downloader",
      vulnerability_id: TARGET_VULNERABILITY_ID
    }
  }
};

console.log(`üîç Testing GraphQL vulnerability lookup for ID: ${TARGET_VULNERABILITY_ID}`);
console.log('Request:', JSON.stringify(testRequest, null, 2));

child.stdin.write(JSON.stringify(testRequest) + '\n');

let output = '';
child.stdout.on('data', (data) => {
  output += data.toString();
  
  // Look for the response
  const lines = output.split('\n');
  for (const line of lines) {
    if (line.trim()) {
      try {
        const response = JSON.parse(line);
        if (response.id === 7) {
          console.log('\n=== GraphQL Vulnerability Lookup Results ===');
          
          if (response.error) {
            console.log('‚ùå Error occurred:');
            console.log(JSON.stringify(response.error, null, 2));
          } else if (response.result) {
            console.log('‚úÖ GraphQL tool executed successfully!');
            
            const vulnerability = JSON.parse(response.result.content[0].text);
            console.log('\nüéØ Vulnerability Details (via GraphQL):');
            console.log(`Title: ${vulnerability.title}`);
            console.log(`State: ${vulnerability.state}`);
            console.log(`Severity: ${vulnerability.severity}`);
            console.log(`Report Type: ${vulnerability.reportType}`);
            
            if (vulnerability.project) {
              console.log(`Project: ${vulnerability.project.name} (${vulnerability.project.fullPath})`);
            }
            
            console.log(`Detected At: ${vulnerability.detectedAt}`);
            console.log(`Confirmed At: ${vulnerability.confirmedAt || 'Not confirmed'}`);
            console.log(`Resolved At: ${vulnerability.resolvedAt || 'Not resolved'}`);
            
            if (vulnerability.resolvedBy) {
              console.log(`Resolved By: ${vulnerability.resolvedBy.username} (${vulnerability.resolvedBy.id})`);
            }
            
            if (vulnerability.description) {
              console.log(`\nDescription:`);
              console.log(vulnerability.description.substring(0, 400) + (vulnerability.description.length > 400 ? '...' : ''));
            }
            
            // Key insight about resolution status
            if (!vulnerability.resolvedAt) {
              console.log(`\nüö® This vulnerability is UNRESOLVED! üö®`);
              console.log(`üìÖ Detected: ${vulnerability.detectedAt}`);
              console.log(`üìã State: ${vulnerability.state}`);
              console.log(`‚ö†Ô∏è  Severity: ${vulnerability.severity}`);
            } else {
              console.log(`\n‚úÖ This vulnerability was resolved at: ${vulnerability.resolvedAt}`);
            }
          }
          
          child.kill();
          process.exit(0);
        }
      } catch (e) {
        // Ignore JSON parse errors for non-JSON lines
      }
    }
  }
});

child.stderr.on('data', (data) => {
  const errorText = data.toString();
  if (!errorText.includes('GitLab MCP Server')) {
    console.error('Error:', errorText);
  }
});

child.on('close', (code) => {
  if (code !== 0) {
    console.log('Process exited with code:', code);
  }
});

// Timeout after 20 seconds
setTimeout(() => {
  console.log('‚ùå Timeout - killing process');
  child.kill();
  process.exit(1);
}, 20000); 