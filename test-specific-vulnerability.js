#!/usr/bin/env node

// Test to find specific vulnerability ID 12094621
import { spawn } from 'child_process';

const child = spawn('node', ['build/index.js'], {
  stdio: ['pipe', 'pipe', 'pipe'],
  env: {
    ...process.env,
    GITLAB_PERSONAL_ACCESS_TOKEN: 'BXz2RUsdvggHkypZsfsW',
    GITLAB_API_URL: 'https://gitlab.agodadev.io'
  }
});

const TARGET_VULNERABILITY_ID = 12094621;

// Get all vulnerabilities to search for the specific ID
const testRequest = {
  jsonrpc: "2.0",
  id: 6,
  method: "tools/call",
  params: {
    name: "list_vulnerabilities",
    arguments: {
      project_id: "connectivity/jtb-downloader",
      per_page: 100
      // Get all vulnerabilities to search for the specific ID
    }
  }
};

console.log(`üîç Searching for vulnerability ID: ${TARGET_VULNERABILITY_ID}`);
console.log('Request:', JSON.stringify(testRequest, null, 2));

child.stdin.write(JSON.stringify(testRequest) + '\n');

let output = '';
child.stdout.on('data', (data) => {
  output += data.toString();
  
  // Look for the response
  const lines = output.split('\n');
  for (const line of lines) {
    if (line.trim()) {
      try {
        const response = JSON.parse(line);
        if (response.id === 6) {
          console.log('\n=== Specific Vulnerability Search Results ===');
          
          if (response.error) {
            console.log('‚ùå Error occurred:');
            console.log(JSON.stringify(response.error, null, 2));
          } else if (response.result) {
            console.log('‚úÖ Tool executed successfully!');
            
            const allVulnerabilities = JSON.parse(response.result.content[0].text);
            console.log(`\nTotal vulnerabilities retrieved: ${allVulnerabilities.length}`);
            
            // Search for the specific vulnerability ID
            const targetVuln = allVulnerabilities.find(vuln => vuln.id === TARGET_VULNERABILITY_ID);
            
            if (targetVuln) {
              console.log(`\nüéØ Found vulnerability ID ${TARGET_VULNERABILITY_ID}!`);
              console.log(`\n--- Vulnerability Details ---`);
              console.log(`ID: ${targetVuln.id}`);
              console.log(`Title: ${targetVuln.title}`);
              console.log(`Severity: ${targetVuln.severity}`);
              console.log(`State: ${targetVuln.state}`);
              console.log(`Report Type: ${targetVuln.report_type}`);
              console.log(`Confidence: ${targetVuln.confidence}`);
              console.log(`üî• Resolved on Default Branch: ${targetVuln.resolved_on_default_branch}`);
              console.log(`Project Default Branch: ${targetVuln.project_default_branch || 'undefined'}`);
              console.log(`Created: ${targetVuln.created_at}`);
              console.log(`Updated: ${targetVuln.updated_at}`);
              
              if (targetVuln.resolved_at) {
                console.log(`Resolved At: ${targetVuln.resolved_at}`);
              }
              if (targetVuln.dismissed_at) {
                console.log(`Dismissed At: ${targetVuln.dismissed_at}`);
              }
              if (targetVuln.confirmed_at) {
                console.log(`Confirmed At: ${targetVuln.confirmed_at}`);
              }
              
              if (targetVuln.finding && targetVuln.finding.location) {
                console.log(`File: ${targetVuln.finding.location.file}`);
                if (targetVuln.finding.location.start_line) {
                  console.log(`Line: ${targetVuln.finding.location.start_line}`);
                }
              }
              
              if (targetVuln.description) {
                console.log(`Description: ${targetVuln.description.substring(0, 200)}${targetVuln.description.length > 200 ? '...' : ''}`);
              }
              
              // Highlight if this is unresolved
              if (targetVuln.resolved_on_default_branch === false) {
                console.log(`\nüö® THIS VULNERABILITY IS UNRESOLVED ON DEFAULT BRANCH! üö®`);
              } else {
                console.log(`\n‚úÖ This vulnerability is resolved on the default branch.`);
              }
              
            } else {
              console.log(`\n‚ùå Vulnerability ID ${TARGET_VULNERABILITY_ID} not found in the current page.`);
              console.log(`\nThis could mean:`);
              console.log(`1. The vulnerability ID is on a different page (try increasing per_page)`);
              console.log(`2. The vulnerability might have a different state filter`);
              console.log(`3. The vulnerability might be in a different project`);
              
              // Show the range of IDs we did find
              const ids = allVulnerabilities.map(v => v.id).sort((a, b) => a - b);
              console.log(`\nVulnerability ID range found: ${ids[0]} - ${ids[ids.length - 1]}`);
              console.log(`Sample IDs: ${ids.slice(0, 10).join(', ')}${ids.length > 10 ? '...' : ''}`);
            }
          }
          
          child.kill();
          process.exit(0);
        }
      } catch (e) {
        // Ignore JSON parse errors for non-JSON lines
      }
    }
  }
});

child.stderr.on('data', (data) => {
  const errorText = data.toString();
  if (!errorText.includes('GitLab MCP Server')) {
    console.error('Error:', errorText);
  }
});

child.on('close', (code) => {
  if (code !== 0) {
    console.log('Process exited with code:', code);
  }
});

// Timeout after 20 seconds
setTimeout(() => {
  console.log('‚ùå Timeout - killing process');
  child.kill();
  process.exit(1);
}, 20000); 